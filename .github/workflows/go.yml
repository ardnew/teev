# Triggered on every push or pull request event to any branch.
name: |
  test(any): all

on: 
  - push
  - pull_request

jobs:
  # Run `go list` to resolve the module's declared Go version
  # and store the result in ${{ outputs.version }}.
  go-mod-version:
    runs-on: |
      ubuntu-latest
    outputs:
      version: ${{ steps.list.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: |
            go.mod
      # GoVersion may contain a complete version such as "1.20.1",
      # or, if go.mod contains both "go" and "toolchain" specs,
      # it may omit the patch and contain only "1.20". 
      # Using "cut" below ensures the patch is always omitted.
      - id: list
        run: |
          go list -m -f 'version={{.GoVersion}}' | 
            cut -sd. -f-2 >> "${GITHUB_OUTPUT}"

  # Run all tests in all packages, and record coverages,
  # on latest versions of Ubuntu, macOS, and Windows
  # using Go module version and other notable releases.
  build:
    needs: 
      - go-mod-version
    strategy:
      matrix:
        os: 
          - ubuntu
          - macos
          - windows
        go: 
          - '1.18'
          - '1.19'
          - "${{ needs.go-mod-version.outputs.version }}"
          - "${{ needs.go-mod-version.outputs.version }}.x"
        include: 
          - version: latest

    env:
      configuration: |
        go${{ matrix.go }}-${{ matrix.os }}-${{ matrix.version }}
    runs-on: |
      ${{ matrix.os }}-${{ matrix.version }}
    name: |
      ${{ env.configuration }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: ${{ matrix.go }} }

      - name: get
        run: |
          go get -v .

      - name: test
        run: |
          go test -json \
            -covermode=count \
            -coverprofile="${configuration}.coverage.out" > 
              "${configuration}.testresults.json"

      - name: put
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.configuration }}"
          path: "${{ env.configuration }}.testresults.json"
